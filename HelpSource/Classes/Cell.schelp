TITLE:: Cell
summary:: A base object for player prototypes
related::Classes/Event, Classes/Environment
categories::Collections>Unordered

CLASSMETHODS::

METHOD:: new
Create a new object
argument:: func
An init function which is run inside the proto environment. Here you can define functions and default values for the cell.
argument:: partialKeys
Any number of keys (as a code::Symbol:: or array of symbols) corresponding to Environments defined within the code::partials:: class variable. These are put into the environment's parent. 
argument:: know
like link::Classes/Event::, know is set to true by default.


METHOD:: initClass

METHOD:: addPartial
Add a partial to the global dictionary. It can be passed as an IdentityDictionary subclass, or as a function which is evaluated inside a new environment.

METHOD:: partials
A dictionary of partials, which can be combined to form prototypes for new cells.


INSTANCEMETHODS::


SUBSECTION:: Player interface

Player is constructed by defining custom actions in the environment. The actions are called with the cell instance as argument. code::currentEnvironment:: is also set to the cell instance. If the actions are not already run within a routine, they are forked so you can use code::.wait::, code::s.sync:: etc inside the actions.

METHOD:: load
Call ~load from environment.
METHOD:: play
Call ~play from environment.
METHOD:: pause
Not yet implemented.
METHOD:: resume
Not yet implemented.
METHOD:: stop
Call ~stop from environment and free all objects.
argument:: now
If now is true, run ~hardStop from environment, if it exists, otherwise call ~stop.
METHOD:: free
Stop player and free objects.

METHOD:: then
Wait for a player action to finish, then run callback.
argument:: func
The callback.

SUBSECTION:: Player state

METHOD:: state
Get player state as symbol

METHOD:: isLoading, isReady, isPlaying, isLoading, isPaused, isStopped
Answer if cell is loading, ready for play (after load), playing, paused or stopped.

METHOD:: cond
A link::Classes/Condition:: which is set to wait whenever player is waiting to complete a player action (link::#-play::, link::#-stop::, link::#-load:: etc).

METHOD:: wait
Wait for link::#-cond::.

SUBSECTION:: Cell hierarchy

METHOD:: validateRelative
argument:: other
METHOD:: siblings
METHOD:: mother
METHOD:: children
METHOD:: addChildren
argument::  ... children
METHOD:: setMother
argument:: obj


PRIVATE:: prChangeState, doOnServerTree, playAfterLoad, checkState, doFunctionPerform, trigAndWait, init, initPlayer, freeAll, afterStop


EXAMPLES::

Example disk player
code::
(
SynthDef(\cellHelpDisk, {
	Out.ar(\out.kr, DiskIn.ar(1, \bufnum.kr, 1) * Env.cutoff.ar(Done.freeSelf, \gate.kr(1)))
}).add
)
(
c = Cell({
	~template.putAll((
		buffer: (
			test: Platform.resourceDir +/+ "sounds/a11wlk01.wav"
		),
		main: (
			test: [\cellHelpDisk, \bufnum, {~buffers[\test]}]
		)
	))
}, \disk);
c.play
)
c.stop;
::
